# -*- coding: utf-8 -*-
"""Template M5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dDUP3HcHIcwTGKs5Nzi5mGpB-0VzBgk8
"""

from opentrons import protocol_api
metadata = {'apiLevel': '2.8'}
def run(protocol:protocol_api.ProtocolContext):
  def IN_assembly_transformation(prom_utr):
    ##extract lengths from tuple: 
    n_promoters = prom_utr[0]
    n_utr = prom_utr[1]
    #Load and set-up labware
    tiprack_20 = protocol.load_labware('opentrons_96_tiprack_20ul', 3)
    tiprack_20_2 = protocol.load_labware('opentrons_96_tiprack_20ul', 2)
    tiprack_20_3 = protocol.load_labware('opentrons_96_tiprack_20ul', 1)
    reservoir_const = protocol.load_labware('4ti0136_96_wellplate_2200ul', 6) # constant reservoir = all parts that are consistent between constructs = destination plasmid in assembly mix + ligase buffer (A1) and 5U-CDS linker (A2), SOC (A3)
    reservoir_var = protocol.load_labware('costar3370flatbottomtransparent_96_wellplate_200ul', 5) # contains all promoters and 3'UTRs to be combined
    tc_mod = protocol.load_module('Thermocycler module') # default position of thermocycler is slot 7, 8, 10, 11
    temperature_module = protocol.load_module('temperature module', 4)
    cells_plate = temperature_module.load_labware('4ti0960rig_96_wellplate_200ul')
    PCR_plate = tc_mod.load_labware('4ti0960rig_96_wellplate_200ul') # 200uL for GG incubation straight into transformation
    spare_plate = protocol.load_labware('4ti0960rig_96_wellplate_200ul', 9) # to hold the rest of the assembled DNA mix that we're not transforming yet
    #Pipettes
    p20s = protocol.load_instrument('p20_single_gen2', 'right', tip_racks=[tiprack_20, tiprack_20_2, tiprack_20_3])
    p20 = protocol.load_instrument('p20_multi_gen2', 'left', tip_racks=[tiprack_20, tiprack_20_2, tiprack_20_3])
    # set up heat block for cells on ice
    temperature_module.set_temperature(4)


    # Set up assembly mix with destination plasmid straight into thermocycler module
    if tc_mod.lid_position != 'open':
      tc_mod.open_lid() # open the lid of the thermocycler 
    ## prom_utr list of lists deleted, seeing as lengths already given as globals from IN_app
    rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G','H']
    columns = list(range(1, 13))  ## 1 ... 12 ; more efficient
    p20.pick_up_tip()
    ## all len(prom_utr[0]) replaced with n_promoters
    ## all len(prom_utr[1]) replaced with n_utr
    if n_promoters*n_utr%8 == 0: 
      min_num_cols = n_promoters*n_utr/8
    else: 
      min_num_cols = (n_promoters*n_utr//8)+1
      
    for i in range(min_num_cols):
      p20.transfer(14, reservoir_const['A1'], PCR_plate[f'A{columns[i]}'], new_tip='never') # A1 in reservoir_const = assembly mix + plasmid
    p20.drop_tip()
    p20.pick_up_tip()
    for i in range(min_num_cols):
      p20.transfer(2, reservoir_const['A2'], PCR_plate[f'A{columns[i]}'], new_tip='never') # A2 in reservoir_const = 5'UTR + CDS
    p20.drop_tip()

    #Code to transfer sample from an indexed plate to the destination PCR plate with combination logic

    for i in range(n_promoters):
      for e in range(n_utr):
        dest_prom = n_promoters * e + i ## stored this in a variable so it's cleaner to look at, logic still the same though. d replaced with i bc d = i (in this nested loop for promoter pipetting)
        p20s.transfer(2, reservoir_var[f'{rows[i % 8]}{columns[i // 8]}'], PCR_plate[f'{rows[dest_prom % 8]}{columns[dest_prom // 8]}'],mix_after = (3,5), new_tip='once') #In this case, A1, A7, B1, C7 etc.
        #, mix_after= (3,5) new_tip = "once"

    d = 0
    for i in range(n_utr): ## switched order of nested for loop; this allows for any number of promoters and UTRs to be inputted
      for e in range(n_promoters):
        dest_utr = i + n_promoters ## stored this in a variable so it's cleaner to look at, logic still the same though
        p20s.transfer(2, reservoir_var[f'{rows[dest_utr % 8]}{columns[dest_utr // 8]}'], PCR_plate[f'{rows[d % 8]}{columns[d // 8]}'], mix_after= (3,5), new_tip = 'once')
        d+=1
    #Incubation protocol
    if tc_mod.lid_position != 'closed':
      tc_mod.close_lid()

    # set the lid temperature before executing a thermocycler profile (37-110 °C)
    # define a thermocycler profile: 37°C, 1 hr → 60°C, 5 min
    profile = [{'temperature': 37, 'hold_time_minutes': 1},{'temperature': 60, 'hold_time_minutes': 1}]
    #Execute the profile.
    tc_mod.execute_profile(steps=profile, repetitions=1,
                              block_max_volume=20)
    #Transformation: https://international.neb.com/protocols/2012/05/21/transformation-protocol
    # 1uL DNA, 25uL cells, 170 uL SOC? Exact vols to be determined later
    #PCR_plate_wells = PCR_plate.wells()
    #spare_plate_wells = spare_plate.wells()

    # define heat-shock profile: 4°C, 30min ; 42°C, 30 sec
    heat_shock_profile = [{'temperature': 4, 'hold_time_minutes': 1},{'temperature': 42, 'hold_time_minutes': 0.5}]

    if tc_mod.lid_position != 'open':
      tc_mod.open_lid() # open the lid of the thermocycler 

    tc_mod.set_block_temperature(4) # 'on ice'
    protocol.pause("Switch out empty tip racks")
    p20.reset_tipracks()
    p20s.reset_tipracks()
    for i in range(min_num_cols):
      p20.transfer(17, PCR_plate[f'A{columns[i]}'], spare_plate[f'A{columns[i]}']) # leave only 1uL in the thermocycler using multichannel pipette
      p20.transfer(20, cells_plate[f'A{columns[i]}'], PCR_plate[f'A{columns[i]}']) # add 20uL of cells to thermocycler, gently mix
    if tc_mod.lid_position != 'closed':
      tc_mod.close_lid()

    #Execute the heat-shock profile.
    tc_mod.execute_profile(steps=heat_shock_profile, repetitions=1,
                              block_max_volume=21)
    if tc_mod.lid_position != 'open':
      tc_mod.open_lid() # open the lid of the thermocycler


  IN_assembly_transformation(prom_utr = prom_utr)